#summary Compiling a simple Android app with vs-android
#labels Phase-Deploy

==Startup==

  * After you have installed vs-android, start up Visual Studio 2010.

==New Project==

  * Go to the 'File' menu, choose 'New -> Project...'

  * Pick 'Visual C++', and 'Empty Project'

  * The location you place the project isn't important. I suggest using a path that doesn't have spaces, since I haven't tested paths which contain spaces.

  * Uncheck 'Create directory for solution'. This puts the sln file and the vcxproj in the same directory. It will still create one directory off the base path you give. So in my case below, it'll end up in "C:\projects\san-angeles"

<img src="http://www.gavpugh.com/img/vs-android/NewProj.png" align="center">

==Adding Files==

  * Download [http://vs-android.googlecode.com/files/san-angeles.zip san-angeles.zip].

  * You'll want to unzip this so that the directory containing '''AndroidManifest.xml''' sits alongside the sln and vcxproj files that were just created. So that same directory would have the 'jni', 'res', and 'src' sub-directories too.

  * Go into the 'jni' directory and drag over the following files into your project as shown:

<img src="http://www.gavpugh.com/img/vs-android/DragFiles.png" align="center">

  * Be sure to leave out the win32 and linux files. Delete them from the Visual Studio project if you accidentally brought them in.

==Adding The Android Platform==

  * Now go to the 'Build' menu and pick 'Configuration Manager...'.

  * In the top right of this dialog, the solution dropdown box, choose 'New...'

<img src="http://www.gavpugh.com/img/vs-android/NewPlat.png" align="center">

  * In the next dialog choose 'Android' from the dropdown list. If it is not present, then there was a problem with installing vs-android.

  * Copy settings from '<empty>', and ensure 'Create new project platforms' is checked.

<img src="http://www.gavpugh.com/img/vs-android/PickAndroid.png" align="center">

==OpenGL Support==

===Preprocessor Symbol===

  * Out of the box, the default setup doesn't hook in OpenGL support. You have to modify project settings to link in the library, and in the case of this san-angeles demo define a preprocessor symbol.

  * Right click on the 'san-angeles' project in the 'Solution Explorer' pane. This is the one that will be shown in bold, right above 'External Dependencies'. Choose 'Properties' from this menu.

  * In this dialog, navigate into the 'C++' part of the tree. Click on 'Preprocessor'.

  * In the right-hand part click on the "Preprocessor Definitions" line, and then on the little arrow that appears in the top-right corner.

  * Choose 'Edit...'

<img src="http://www.gavpugh.com/img/vs-android/prepro.png" align="center">

  * Type *DISABLE_IMPORTGL* into the top box. The 'importgl.h' header needs this defined in order to link statically with the OpenGL ES library. Click OK when you're done typing.

===Linker===

  * Navigate into the 'Linker' part of the tree now. Go to the 'Command Line' option:

<img src="http://www.gavpugh.com/img/vs-android/AddOpts.png" align="center">

  * Type *-lGLESv1_CM* into the lower box. The letter after the initial dash is a lower case 'L'. This tells the linker to link in that OpenGL library.

===Ant===

<img src="http://www.gavpugh.com/img/vs-android/AntDebug.png" align="center">

<img src="http://www.gavpugh.com/img/vs-android/Finished.png" align="center">